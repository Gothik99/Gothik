from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler, MessageHandler, Filters
from database import Database
from keyboards import Keyboards
from calculations import MaterialCalculator
import logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
MATERIAL_TYPE, AREA, THICKNESS = range(3)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

db = Database()

class WorkerHandlers:
    @staticmethod
    def request_access(update: Update, context: CallbackContext):
        user = update.effective_user
        user_data = db.get_user(user.id)
        
        if user_data and user_data['role'] != 'pending':
            update.message.reply_text(
                "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return
        
        db.add_user(user.id, user.username, user.first_name, user.last_name, 'pending')
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in Config.ADMIN_IDS:
            try:
                context.bot.send_message(
                    admin_id,
                    f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø:\n\nüë§ {user.first_name} {user.last_name}\nüìß @{user.username}\nüÜî {user.id}",
                    reply_markup=Keyboards.worker_actions_keyboard(user.id)
                )
            except Exception as e:
                logger.error(f"Error notifying admin {admin_id}: {e}")
        
        update.message.reply_text(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
    
    @staticmethod
    def start_calculation(update: Update, context: CallbackContext):
        update.message.reply_text(
            "üßÆ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:",
            reply_markup=Keyboards.materials_keyboard()
        )
        return MATERIAL_TYPE
    
    @staticmethod
    def get_material_type(update: Update, context: CallbackContext):
        material = update.message.text.lower()
        if material not in Config.MATERIALS:
            update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return MATERIAL_TYPE
        
        context.user_data['material_type'] = material
        update.message.reply_text("üìè –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ –º¬≤:")
        return AREA
    
    @staticmethod
    def get_area(update: Update, context: CallbackContext):
        try:
            area = float(update.message.text.replace(',', '.'))
            if area <= 0:
                raise ValueError
        except ValueError:
            update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return AREA
        
        context.user_data['area'] = area
        
        material = Config.MATERIALS[context.user_data['material_type']]
        if material['thickness_dependent']:
            update.message.reply_text("üìê –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å–ª–æ—è –≤ –º–º:")
            return THICKNESS
        else:
            return WorkerHandlers.finish_calculation(update, context)
    
    @staticmethod
    def get_thickness(update: Update, context: CallbackContext):
        try:
            thickness = float(update.message.text.replace(',', '.'))
            if thickness <= 0:
                raise ValueError
        except ValueError:
            update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return THICKNESS
        
        context.user_data['thickness'] = thickness
        return WorkerHandlers.finish_calculation(update, context)
    
    @staticmethod
    def finish_calculation(update: Update, context: CallbackContext):
        material_type = context.user_data['material_type']
        area = context.user_data['area']
        thickness = context.user_data.get('thickness', 0)
        
        quantity = MaterialCalculator.calculate_material(material_type, area, thickness)
        result = MaterialCalculator.format_calculation_result(material_type, area, thickness, quantity)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        projects = db.get_projects()
        if projects:
            update.message.reply_text(
                "üèó –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ä–∞—Å—á–µ—Ç –∫ –ø—Ä–æ–µ–∫—Ç—É?",
                reply_markup=Keyboards.projects_keyboard(projects)
            )
            context.user_data['calculation_result'] = (material_type, area, thickness, quantity)
            return ConversationHandler.END
        else:
            update.message.reply_text(result, reply_markup=Keyboards.main_menu('worker'))
            return ConversationHandler.END
    
    @staticmethod
    def link_calculation_to_project(update: Update, context: CallbackContext):
        project_address = update.message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        projects = db.get_projects()
        
        for project in projects:
            if project['address'] == project_address:
                material_type, area, thickness, quantity = context.user_data['calculation_result']
                
                db.add_calculation(
                    update.effective_user.id,
                    project['project_id'],
                    material_type,
                    area,
                    thickness,
                    quantity
                )
                
                result = MaterialCalculator.format_calculation_result(material_type, area, thickness, quantity)
                update.message.reply_text(
                    f"{result}\n\n‚úÖ –†–∞—Å—á–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ–µ–∫—Ç—É: {project['address']}",
                    reply_markup=Keyboards.main_menu('worker')
                )
                break
        
        context.user_data.clear()
        return ConversationHandler.END
    
    @staticmethod
    def cancel_calculation(update: Update, context: CallbackContext):
        update.message.reply_text(
            "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=Keyboards.main_menu('worker')
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    @staticmethod
    def show_projects_list(update: Update, context: CallbackContext):
        projects = db.get_projects()
        if not projects:
            update.message.reply_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.")
            return
        
        update.message.reply_text(
            "üèó –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
            reply_markup=Keyboards.projects_keyboard(projects)
        )
    
    @staticmethod
    def show_project_details(update: Update, context: CallbackContext):
        project_address = update.message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        projects = db.get_projects()
        
        for project in projects:
            if project['address'] == project_address:
                message = (f"üè† –ê–¥—Ä–µ—Å: {project['address']}\n"
                          f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {project['created_at']}\n"
                          f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {project['first_name']} {project['last_name']}\n"
                          f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {project['description']}")
                
                update.message.reply_text(
                    message,
                    reply_markup=Keyboards.project_details_keyboard(project['project_id'])
                )
                break
    
    @staticmethod
    def project_details_callback(update: Update, context: CallbackContext):
        query = update.callback_query
        query.answer()
        
        action, project_id = query.data.split('_')
        project = db.get_project(project_id)
        
        if action == 'design':
            try:
                with open(project['design_pdf_path'], 'rb') as file:
                    context.bot.send_document(
                        chat_id=query.message.chat_id,
                        document=file,
                        caption=f"üìÑ –î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç –¥–ª—è {project['address']}"
                    )
            except Exception as e:
                logger.error(f"Error sending design file: {e}")
                query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")
        
        elif action == 'lock':
            query.edit_message_text(f"üîë –ö–æ–¥ –∑–∞–º–∫–∞ –¥–ª—è {project['address']}: {project['lock_code']}")
        
        elif action == 'calculations':
            calculations = db.get_user_calculations(update.effective_user.id)
            if not calculations:
                query.edit_message_text("üì≠ –ù–µ—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
                return
            
            calc_list = "\n".join(
                [f"üß± {c['material_type']} - {c['quantity']} {Config.MATERIALS[c['material_type'].lower()]['unit']} (–ü–ª–æ—â–∞–¥—å: {c['area']} –º¬≤)"
                 for c in calculations if c['project_id'] == int(project_id)]
            )
            
            query.edit_message_text(f"üìä –í–∞—à–∏ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è {project['address']}:\n\n{calc_list}")
    
    @staticmethod
    def show_messages(update: Update, context: CallbackContext):
        user = update.effective_user
        messages = db.get_user_messages(user.id)
        
        if not messages:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
        
        for msg in messages[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            update.message.reply_text(f"üì© –û—Ç {msg['sender_name']}:\n\n{msg['text']}")
    
    @staticmethod
    def send_message_to_admin(update: Update, context: CallbackContext):
        if len(context.args) < 1:
            update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /message –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        message_text = ' '.join(context.args)
        worker = update.effective_user
        
        for admin_id in Config.ADMIN_IDS:
            try:
                context.bot.send_message(
                    admin_id,
                    f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ {worker.first_name} {worker.last_name} (@{worker.username}):\n\n{message_text}"
                )
            except Exception as e:
                logger.error(f"Error sending message to admin {admin_id}: {e}")
        
        db.add_message(worker.id, admin_id, message_text)
        update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")