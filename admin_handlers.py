from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler, MessageHandler, Filters, CallbackQueryHandler
from database import Database
from keyboards import Keyboards
from config import Config
import os
import logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PROJECT_ADDRESS, PROJECT_DESCRIPTION, PROJECT_DESIGN, PROJECT_LOCK_CODE = range(4)
BROADCAST_MESSAGE = range(1)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

db = Database()

class AdminHandlers:
    @staticmethod
    def admin_menu(update: Update, context: CallbackContext):
        user = update.effective_user
        if user.id not in Config.ADMIN_IDS:
            update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        update.message.reply_text(
            "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=Keyboards.main_menu('admin')
        )
    
    @staticmethod
    def manage_workers(update: Update, context: CallbackContext):
        user = update.effective_user
        if user.id not in Config.ADMIN_IDS:
            update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        update.message.reply_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏",
            reply_markup=Keyboards.workers_management_keyboard()
        )
    
    @staticmethod
    def show_pending_workers(update: Update, context: CallbackContext):
        query = update.callback_query
        query.answer()
        
        pending_workers = db.get_pending_workers()
        if not pending_workers:
            query.edit_message_text("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç—É–ø.")
            return
        
        for worker in pending_workers:
            worker_info = (f"üë§ {worker['first_name']} {worker['last_name']}\n"
                          f"üìß @{worker['username']}\n"
                          f"üÜî ID: {worker['user_id']}")
            
            query.edit_message_text(
                worker_info,
                reply_markup=Keyboards.worker_actions_keyboard(worker['user_id'])
            )
            break  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ callback
    
    @staticmethod
    def handle_worker_approval(update: Update, context: CallbackContext):
        query = update.callback_query
        query.answer()
        
        action, worker_id = query.data.split('_')
        worker_id = int(worker_id)
        worker = db.get_user(worker_id)
        
        if action == 'approve':
            db.update_user_role(worker_id, 'worker')
            context.bot.send_message(
                worker_id,
                "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                reply_markup=Keyboards.main_menu('worker')
            )
            query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{worker['username']} –æ–¥–æ–±—Ä–µ–Ω.")
        else:
            db.update_user_role(worker_id, 'rejected')
            context.bot.send_message(
                worker_id,
                "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            query.edit_message_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{worker['username']} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    
    @staticmethod
    def show_workers_list(update: Update, context: CallbackContext):
        query = update.callback_query
        query.answer()
        
        workers = db.get_all_workers()
        if not workers:
            query.edit_message_text("üë∑ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.")
            return
        
        workers_list = "\n".join(
            [f"üë§ {w['first_name']} {w['last_name']} (@{w['username']}) - üÜî {w['user_id']}" 
             for w in workers]
        )
        
        query.edit_message_text(f"üë∑ –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:\n\n{workers_list}")
    
    @staticmethod
    def start_add_project(update: Update, context: CallbackContext):
        user = update.effective_user
        if user.id not in Config.ADMIN_IDS:
            update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        update.message.reply_text(
            "üèó –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:",
            reply_markup=Keyboards.back_keyboard()
        )
        return PROJECT_ADDRESS
    
    @staticmethod
    def get_project_address(update: Update, context: CallbackContext):
        context.user_data['project_address'] = update.message.text
        update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        return PROJECT_DESCRIPTION
    
    @staticmethod
    def get_project_description(update: Update, context: CallbackContext):
        context.user_data['project_description'] = update.message.text
        update.message.reply_text("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ PDF —Ñ–∞–π–ª —Å –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç–æ–º:")
        return PROJECT_DESIGN
    
    @staticmethod
    def get_project_design(update: Update, context: CallbackContext):
        if not update.message.document or not update.message.document.file_name.endswith('.pdf'):
            update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
            return PROJECT_DESIGN
        
        design_file = update.message.document
        design_path = os.path.join(Config.TEMP_DIR, design_file.file_name)
        
        os.makedirs(Config.TEMP_DIR, exist_ok=True)
        
        file = context.bot.get_file(design_file.file_id)
        file.download(design_path)
        
        context.user_data['project_design_path'] = design_path
        update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–º–∫—É:")
        return PROJECT_LOCK_CODE
    
    @staticmethod
    def get_project_lock_code(update: Update, context: CallbackContext):
        lock_code = update.message.text
        project_id = db.add_project(
            context.user_data['project_address'],
            context.user_data['project_description'],
            context.user_data['project_design_path'],
            lock_code,
            update.effective_user.id
        )
        
        update.message.reply_text(
            f"‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {project_id})",
            reply_markup=Keyboards.main_menu('admin')
        )
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        context.user_data.clear()
        return ConversationHandler.END
    
    @staticmethod
    def cancel_project_creation(update: Update, context: CallbackContext):
        user = update.effective_user
        update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=Keyboards.main_menu('admin')
        )
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if 'project_design_path' in context.user_data:
            try:
                os.remove(context.user_data['project_design_path'])
            except:
                pass
        
        context.user_data.clear()
        return ConversationHandler.END
    
    @staticmethod
    def show_projects_list(update: Update, context: CallbackContext):
        projects = db.get_projects()
        if not projects:
            update.message.reply_text("üì≠ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.")
            return
        
        update.message.reply_text(
            "üèó –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
            reply_markup=Keyboards.projects_keyboard(projects)
        )
    
    @staticmethod
    def show_project_details(update: Update, context: CallbackContext):
        project_address = update.message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        projects = db.get_projects()
        
        for project in projects:
            if project['address'] == project_address:
                message = (f"üè† –ê–¥—Ä–µ—Å: {project['address']}\n"
                          f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {project['created_at']}\n"
                          f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {project['first_name']} {project['last_name']}\n"
                          f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {project['description']}")
                
                update.message.reply_text(
                    message,
                    reply_markup=Keyboards.project_details_keyboard(project['project_id'])
                )
                break
    
    @staticmethod
    def project_details_callback(update: Update, context: CallbackContext):
        query = update.callback_query
        query.answer()
        
        action, project_id = query.data.split('_')
        project = db.get_project(project_id)
        
        if action == 'design':
            try:
                with open(project['design_pdf_path'], 'rb') as file:
                    context.bot.send_document(
                        chat_id=query.message.chat_id,
                        document=file,
                        caption=f"üìÑ –î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç –¥–ª—è {project['address']}"
                    )
            except Exception as e:
                logger.error(f"Error sending design file: {e}")
                query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")
        
        elif action == 'lock':
            query.edit_message_text(f"üîë –ö–æ–¥ –∑–∞–º–∫–∞ –¥–ª—è {project['address']}: {project['lock_code']}")
        
        elif action == 'calculations':
            calculations = db.get_user_calculations(project['created_by'])
            if not calculations:
                query.edit_message_text("üì≠ –ù–µ—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
                return
            
            calc_list = "\n".join(
                [f"üß± {c['material_type']} - {c['quantity']} {Config.MATERIALS[c['material_type'].lower()]['unit']} (–ü–ª–æ—â–∞–¥—å: {c['area']} –º¬≤)"
                 for c in calculations if c['project_id'] == int(project_id)]
            )
            
            query.edit_message_text(f"üìä –†–∞—Å—á–µ—Ç—ã –¥–ª—è {project['address']}:\n\n{calc_list}")
    
    @staticmethod
    def start_broadcast(update: Update, context: CallbackContext):
        user = update.effective_user
        if user.id not in Config.ADMIN_IDS:
            update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        update.message.reply_text(
            "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º:",
            reply_markup=Keyboards.back_keyboard()
        )
        return BROADCAST_MESSAGE
    
    @staticmethod
    def confirm_broadcast(update: Update, context: CallbackContext):
        context.user_data['broadcast_message'] = update.message.text
        update.message.reply_text(
            f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{update.message.text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
            reply_markup=Keyboards.broadcast_confirmation_keyboard()
        )
        return ConversationHandler.END
    
    @staticmethod
    def send_broadcast(update: Update, context: CallbackContext):
        query = update.callback_query
        query.answer()
        
        if query.data == 'broadcast_confirm':
            workers = db.get_all_workers()
            message = context.user_data['broadcast_message']
            
            success = 0
            failed = 0
            
            for worker in workers:
                try:
                    context.bot.send_message(worker['user_id'], f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message}")
                    success += 1
                except:
                    failed += 1
            
            query.edit_message_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º.\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}")
        
        elif query.data == 'broadcast_edit':
            query.edit_message_text("üì¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
            return BROADCAST_MESSAGE
        else:
            query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
        context.user_data.clear()
    
    @staticmethod
    def cancel_broadcast(update: Update, context: CallbackContext):
        update.message.reply_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=Keyboards.main_menu('admin')
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    @staticmethod
    def show_messages(update: Update, context: CallbackContext):
        user = update.effective_user
        messages = db.get_user_messages(user.id)
        
        if not messages:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
        
        for msg in messages[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            update.message.reply_text(f"üì© –û—Ç {msg['sender_name']}:\n\n{msg['text']}")